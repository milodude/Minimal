// Mocks generated by Mockito 5.2.0 from annotations
// in coda_test/test/features/clients/presentation/bloc/single_client/single_client_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:coda_test/core/error/failure.dart' as _i6;
import 'package:coda_test/features/clients/domain/entities/client.dart' as _i7;
import 'package:coda_test/features/clients/domain/repository/client_repository.dart'
    as _i2;
import 'package:coda_test/features/clients/domain/use_cases/add_client_use_case.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClientRepository_0 extends _i1.Fake implements _i2.ClientRepository {
}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [AddClientUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddClientUseCase extends _i1.Mock implements _i4.AddClientUseCase {
  MockAddClientUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ClientRepository get clientRepository =>
      (super.noSuchMethod(Invocation.getter(#clientRepository),
          returnValue: _FakeClientRepository_0()) as _i2.ClientRepository);
  @override
  set clientRepository(_i2.ClientRepository? _clientRepository) => super
      .noSuchMethod(Invocation.setter(#clientRepository, _clientRepository),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ClientData>> call(
          _i4.ClientParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i7.ClientData>>.value(
              _FakeEither_1<_i6.Failure, _i7.ClientData>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i7.ClientData>>);
}
